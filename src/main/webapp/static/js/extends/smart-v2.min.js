!function () {
    var e = new OT2.Event, t = {};
    $("script[data-template]").each(function () {
        var e = $(this).data("template");
        t[e] = _.template($.trim(this.innerHTML))
    });
    var i = !1, n = !1, s = {
        $el: $("#smarter-view"),
        NodeLabel_xs: [],
        $: function () {
            return this.$el.find.apply(this.$el, arguments)
        },
        defaults: {tree_type: "category", tree_url: "/question/tree", count_url: "/smarter/count"},
        init: function (e, t) {
            this.option = $.extend({}, this.defaults, t), this.empty_node_info = this.$el.find(".section-itemsbox").html(), a.init(e), this.initTree(), this.initTips(), this.manual_events(), this.manual_subscribe()
        },
        initTree: function () {
            var e = this, i = this.option, s = new OT2.Tree($("#J_Tree"), !0),
                r = $(t["tree-loading"]()).insertBefore(s.$el);
            s.fetch(i.tree_url, {id: 0, type: i.tree_type}, void 0, function () {
                r.remove()
            }), s.subscribe("Node:checked", function () {
                if (n) return !1;
                var t = [];
                _.each(s.getNodeListChecked(), function (e) {
                    e.parent && e.parent.checkbox.checked || t.push(e)
                }), e.render_NodeList(t), e.ajax_count()
            })
        },
        manual_events: function () {
            var t = this, i = OT2.Element, n = [];
            this.$("#J_Difficulty .radiobox").each(function () {
                new i.radio(this, n).bindEvent(function () {
                    t.ajax_count()
                })
            });
            var s = [];
            this.$("#J_Nj .checkbox").each(function () {
                var n = new i.checkbox(this, s);
                n.bindEvent(function () {
                    var e = _.filter(s, function (e) {
                        return 1 == e.checked
                    }).length;
                    t.$("#J_NjError").css("display", 0 == e ? "inline" : "none"), t.ajax_count()
                }), e.subscribe("nj:checked", function (e) {
                    n.checked && e.push(n)
                })
            });
            var r = [];
            this.$("#J_SelectType .radiobox").each(function () {
                new i.radio(this, r).bindEvent(function () {
                    t.ajax_count()
                })
            }), this.$el.on("submit", "#select-form", function () {
                return t.save_form()
            }), this.$el.on("click", ".result-head a", function () {
                t.empty_NodeList()
            })
        },
        manual_subscribe: function () {
        },
        get_nj: function () {
            var t = [];
            return e.publish("nj:checked", t), t
        },
        render_NodeList: function (e) {
            var t = this, i = [];
            t.NodeLabel_xs = [], _.each(e, function (e) {
                var n = new r(e);
                i.push(n.$el), t.NodeLabel_xs.push(n)
            }), 0 == i.length && (i = this.empty_node_info, a.update(null)), this.$el.find(".section-itemsbox").html(i), this.$el.find(".result-head b").html(e.length)
        },
        empty_NodeList: function () {
            n = !0, _.each(this.NodeLabel_xs, function (e) {
                e.del()
            }), this.render_NodeList([]), a.update(null), n = !1
        },
        save_form: function () {
            var e = this;
            if (!this.validate_form()) return !1;
            var t = OT2.LocalData.get("basket_cacheObj_v2");
            if (!t || t.length < 4) return !0;
            if (i) return !0;
            return dialog({
                title: "组卷提醒",
                content: "智能组卷将清空您的试题篮,是否继续?",
                okValue: "确定",
                cancelValue: "取消",
                padding: 20,
                ok: function () {
                    i = !0, e.empty_basket(), e.$("#select-form").submit()
                },
                cancel: function () {
                }
            }).showModal(), !1
        },
        validate_form: function () {
            if (void 0 === USER.uid || 0 == USER.uid) return OT2.Global.initLogin(), !1;
            if (0 == this.get_nj().length) return OT2.Util.alert("请选择试卷的适用年级"), !1;
            if (0 == this.NodeLabel_xs.length) {
                var e = "category" == this.option.tree_type ? "章节" : "知识点";
                return OT2.Util.alert("请选择" + e), !1
            }
            return 0 == a.get_selected() ? (OT2.Util.alert("请选择一种题型"), !1) : !!a.validate()
        },
        ajax_count: function () {
            if (0 == this.NodeLabel_xs.length) return !1;
            var e = this.$("#select-form").serializeArray();
            $.post(this.option.count_url, e, "json").done(function (e) {
                a.update(e.data)
            })
        },
        initTips: function () {
            this.$el.find(".J_IconTip").each(function () {
                var e = $(t.tips({text: this.getAttribute("title")}));
                this.removeAttribute("title");
                var i = $(this).position();
                e.css({
                    left: i.left - 9,
                    top: i.top + 36,
                    position: "absolute"
                }), e.hide().insertAfter(this), $(this).hover(function () {
                    e.show()
                }, function () {
                    e.hide()
                })
            })
        },
        empty_basket: function () {
            var e = {};
            try {
                e = JSON3.parse(OT2.LocalData.get("basket_cacheObj_v2")) || {}
            } catch (e) {
            }
            if (!OT2.xd_chid) return OT2.LocalData.set("basket_cacheObj_v2", JSON3.stringify({}), !1), !1;
            try {
                var t = OT2.xd_chid.xd, i = OT2.xd_chid.chid;
                _.each(e, function (n, s) {
                    n.xd == t && n.xk == i && delete e[s]
                }), OT2.LocalData.set("basket_cacheObj_v2", JSON3.stringify(e), !1);
                var n = ["paper2016", t, i].join(":"), s = OT2.LocalData.get(n);
                if (!s || 0 == s.length) return !1;
                var r = {};
                try {
                    r = JSON3.parse(s) || {}
                } catch (e) {
                }
                r.types = {}, OT2.LocalData.set(n, JSON3.stringify(r), !1)
            } catch (e) {
                OT2.LocalData.set("basket_cacheObj_v2", JSON3.stringify({}), !1)
            }
        }
    }, r = function () {
        this.init.apply(this, arguments)
    };
    $.extend(r.prototype, {
        init: function (e) {
            this.node = e, this.render(e.model), this.manual_events()
        }, render: function (e) {
            var i = "category" == s.option.tree_type ? "categories" : "knowledges";
            return this.$el = $(t["node-label"]({field: i, model: e})), this
        }, manual_events: function () {
            var e = this;
            this.$el.find(".J_DelBtn").on("click", function () {
                e.del()
            })
        }, del: function () {
            this.node.$tit.click(), this.$el.remove()
        }
    });
    var a = {
        DS: {}, init: function (e) {
            var t = this;
            _.each(e, function (e) {
                var i = new o(e);
                t.DS[e.question_channel_type] = i
            })
        }, update: function (e) {
            var t = this;
            null == e ? _.each(this.DS, function (e) {
                e.model.num = 0, e.update()
            }) : _.each(e, function (e) {
                var i = t.DS[e.question_channel_type];
                i.model = $.extend({}, e), void 0 !== i && i.update()
            })
        }, get_selected: function () {
            return _.filter(this.DS, function (e) {
                return e.is_select
            })
        }, get_num: function () {
            var e = this.get_selected(), t = 0;
            return _.each(e, function (e) {
                var i = e.$el_L.find("input").val();
                t += Number(i) || 0
            }), t
        }, validate: function () {
            var e = this.get_selected(), i = !0, n = 0;
            if (_.each(e, function (e) {
                    var t = e.$el_L.find("input"), s = Number(t.val().replace(/\D/, "")) || 0;
                    s || (i = !1), i && s > e.model.num && t.val(e.model.num), e.mark_error(s), n += s
                }), !i) return OT2.Util.alert("请先设置各题型相应题量", 1), !1;
            if (n > USER.basketLimit) {
                var s = !USER.isVip && 0 == USER.school_permit_id, r = USER.basketLimit;
                return OT2.Util.alert(t["limit-info"]({limit: r, show: s}), 1), !1
            }
            return !0
        }
    }, o = function () {
        this.init.apply(this, arguments)
    };
    $.extend(o.prototype, {
        init: function (e) {
            this.is_select = !1, this.model = e || {}, "单选题" != this.model.name && "填空题" != this.model.name || (this.is_select = !0), this.$el_L = null, this.$el_R = null, this.render()
        }, render: function () {
            return this.$el_L && (this.$el_L.remove(), this.$el_L = null), this.is_select && this.renderLeft(), this.$el_R || this.renderRight(), this.$el_R[this.is_select ? "removeClass" : "addClass"]("active"), this
        }, renderLeft: function () {
            var e = this;
            this.$el_L = $(t["type-item-L"](this.model)), s.$("#J_TypeItems ul").append(this.$el_L), this.$el_L.on("click", "a", function () {
                e.is_select = !1, e.render()
            }), this.$el_L.on("keyup input", "input", function () {
                var e = Number(this.value.replace(/\D/, ""));
                e = e > 0 ? e : "", this.value = e.toString().slice(0, 3), e && $(this).removeClass("error")
            }), this.$el_L.on("blur", "input", function () {
                var t = Number(this.value.replace(/\D/, "")) || 0;
                t && t > e.model.num && (this.value = e.model.num), e.mark_error(t)
            })
        }, mark_error: function (e) {
            this.$el_L.find("input")[e ? "removeClass" : "addClass"]("error")
        }, renderRight: function () {
            var e = this;
            this.$el_R = $(t["type-item-R"]({name: this.model.name})), s.$("#J_TypeItems dd").append(this.$el_R), this.$el_R.on("click", function () {
                if (e.is_select) return !1;
                e.is_select = !0, e.render()
            })
        }, update: function () {
            if (this.is_select) {
                var e = this.model.num > 999 ? "999+" : this.model.num;
                this.$el_L.find("b").html(e + " 道试题可用")
            }
        }
    }), window.App = s
}();