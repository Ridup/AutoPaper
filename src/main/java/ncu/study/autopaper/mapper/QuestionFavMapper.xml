<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ncu.study.autopaper.dao.QuestionFavMapper">
  <resultMap id="BaseResultMap" type="ncu.study.autopaper.model.QuestionFav">
    <constructor>
      <idArg column="USER_ID" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <idArg column="QUESTION_ID" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="COLLECT_TIME" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="QUESTION_DIFFICULTY" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="IS_WRONG" javaType="java.lang.Integer" jdbcType="INTEGER" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    USER_ID, QUESTION_ID, COLLECT_TIME, QUESTION_DIFFICULTY, IS_WRONG
  </sql>
  <select id="selectByExample" parameterType="ncu.study.autopaper.model.QuestionFavExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from question_fav
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="ncu.study.autopaper.model.QuestionFavKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from question_fav
    where USER_ID = #{userId,jdbcType=INTEGER}
      and QUESTION_ID = #{questionId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="ncu.study.autopaper.model.QuestionFavKey">
    delete from question_fav
    where USER_ID = #{userId,jdbcType=INTEGER}
      and QUESTION_ID = #{questionId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="ncu.study.autopaper.model.QuestionFavExample">
    delete from question_fav
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="ncu.study.autopaper.model.QuestionFav">
    insert into question_fav (USER_ID, QUESTION_ID, COLLECT_TIME, 
      QUESTION_DIFFICULTY, IS_WRONG)
    values (#{userId,jdbcType=INTEGER}, #{questionId,jdbcType=BIGINT}, #{collectTime,jdbcType=TIMESTAMP}, 
      #{questionDifficulty,jdbcType=INTEGER}, #{isWrong,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="ncu.study.autopaper.model.QuestionFav">
    insert into question_fav
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="questionId != null">
        QUESTION_ID,
      </if>
      <if test="collectTime != null">
        COLLECT_TIME,
      </if>
      <if test="questionDifficulty != null">
        QUESTION_DIFFICULTY,
      </if>
      <if test="isWrong != null">
        IS_WRONG,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="questionId != null">
        #{questionId,jdbcType=BIGINT},
      </if>
      <if test="collectTime != null">
        #{collectTime,jdbcType=TIMESTAMP},
      </if>
      <if test="questionDifficulty != null">
        #{questionDifficulty,jdbcType=INTEGER},
      </if>
      <if test="isWrong != null">
        #{isWrong,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="ncu.study.autopaper.model.QuestionFavExample" resultType="java.lang.Long">
    select count(*) from question_fav
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update question_fav
    <set>
      <if test="record.userId != null">
        USER_ID = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.questionId != null">
        QUESTION_ID = #{record.questionId,jdbcType=BIGINT},
      </if>
      <if test="record.collectTime != null">
        COLLECT_TIME = #{record.collectTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.questionDifficulty != null">
        QUESTION_DIFFICULTY = #{record.questionDifficulty,jdbcType=INTEGER},
      </if>
      <if test="record.isWrong != null">
        IS_WRONG = #{record.isWrong,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update question_fav
    set USER_ID = #{record.userId,jdbcType=INTEGER},
      QUESTION_ID = #{record.questionId,jdbcType=BIGINT},
      COLLECT_TIME = #{record.collectTime,jdbcType=TIMESTAMP},
      QUESTION_DIFFICULTY = #{record.questionDifficulty,jdbcType=INTEGER},
      IS_WRONG = #{record.isWrong,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="ncu.study.autopaper.model.QuestionFav">
    update question_fav
    <set>
      <if test="collectTime != null">
        COLLECT_TIME = #{collectTime,jdbcType=TIMESTAMP},
      </if>
      <if test="questionDifficulty != null">
        QUESTION_DIFFICULTY = #{questionDifficulty,jdbcType=INTEGER},
      </if>
      <if test="isWrong != null">
        IS_WRONG = #{isWrong,jdbcType=INTEGER},
      </if>
    </set>
    where USER_ID = #{userId,jdbcType=INTEGER}
      and QUESTION_ID = #{questionId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="ncu.study.autopaper.model.QuestionFav">
    update question_fav
    set COLLECT_TIME = #{collectTime,jdbcType=TIMESTAMP},
      QUESTION_DIFFICULTY = #{questionDifficulty,jdbcType=INTEGER},
      IS_WRONG = #{isWrong,jdbcType=INTEGER}
    where USER_ID = #{userId,jdbcType=INTEGER}
      and QUESTION_ID = #{questionId,jdbcType=BIGINT}
  </update>
</mapper>